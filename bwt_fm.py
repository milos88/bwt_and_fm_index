import time

def suffixArray(s):
    """ Given T return suffix array SA(T).  We use Python's sorted
        function here for simplicity, but we can do better. """
    satups = sorted([(s[i:], i) for i in range(len(s))])
    # Extract and return just the offsets
    return map(lambda x: x[1], satups)

def bwtViaSa(t):
    """ Given T, returns BWT(T) by way of the suffix array. """
    bw = []
    sa = list(suffixArray(t))
    for si in sa:
        if si == 0: bw.append('$')
        else: bw.append(t[si-1])
    return ''.join(bw), list(sa)

def calculate_checkpoint(pos, c, l, occ, skip, bwt_len):
    remainder = pos % skip
    index = int(pos / skip)
    if pos >= bwt_len:
        index -= 1
    if remainder == 0 and pos < bwt_len:
        occ_pos = occ[c][index]
    else:
        if remainder > skip - remainder and (index + 1) * skip < bwt_len:
            occ_pos = occ[c][index + 1]
            for i in range((index + 1) * skip, pos, -1):
                if l[i] == c:
                    occ_pos -=1
        else:
            occ_pos = occ[c][index]
            for i in range(index * skip + 1, pos + 1, 1):
                if i >= bwt_len:
                    break
                if l[i] == c:
                    occ_pos += 1
    
    return occ_pos

def update_range(l, c, C, occ, skip, bwt_len, start=None, end=None):
    keys = list(C.keys())
    index = keys.index(c) + 1
    end_next_c = C[keys[index]] if index < len(keys) else bwt_len
    occ_start = 0
    occ_end = 0

    if start and end:
        occ_start = calculate_checkpoint(start - 1, c, l, occ, skip, bwt_len)
        occ_end = calculate_checkpoint(end - 1, c, l, occ, skip, bwt_len)

    start = C[c] + occ_start
    end = C[c] + occ_end if end else end_next_c

    return start, end

def find_indices_in_input(l, C, occ, sa, start, end):
    positions = []
    for i in range(start, end, 1):
        pos = i
        steps = 0
        while pos not in sa.keys():
            char = l[pos]
            pos = C[char] + calculate_checkpoint(pos - 1, char, l, occ, skip, bwt_len) # occ[char][pos]
            steps += 1
        positions.append((sa[pos] + steps) % len(l))

    return positions
    
def find_positions(l, C, occ, skip, bwt_len, p, sa):

    c = p[-1]
    start, end = update_range(l, c, C, occ, skip, bwt_len)
    for i in range(len(p) - 2, -1, -1):
        c = p[i]
        start, end = update_range(l, c, C, occ, skip, bwt_len, start, end)
        
        if start > end:
            return None # there is no patern p in input text
        
    positions = find_indices_in_input(l, C, occ, sa, start, end)
    # pos = [sa[i] for i in range(start, end, 1)]

    return positions

def create_fm_index(bwt, skip):
    C = {} # dict to save position of first character in F array
    occ = {} # dict to save the number of occurrences of a character up to a given position in the BWT string.
    pos = 0
    for c in sorted(set(bwt)):
        C[c] = pos
        pos += bwt.count(c)
        occ[c] = [0] * (int(len(bwt) / skip) + (1 if len(bwt) % skip != 0 else 0))
    
    for i in range(int(len(bwt) / skip) + (1 if len(bwt) % skip != 0 else 0)):
        if i == 0:
            char = bwt[i]
            for key in occ.keys():
                occ[key][i] = 1 if key == char else 0
            continue
        for j in range(1, skip + 1):
            if (i - 1) * skip + j >= len(bwt):
                break
            char = bwt[(i - 1) * skip + j]
            for key in occ.keys():
                if j == 1:
                    occ[key][i] = occ[key][i - 1] + (1 if key == char else 0)
                else:
                    occ[key][i] += 1 if key == char else 0
    return C, occ

# Memory usage calculation
import sys

def get_size(obj, seen=None):
    """Recursively finds the size of objects."""
    size = sys.getsizeof(obj)
    if seen is None:
        seen = set()
    obj_id = id(obj)
    if obj_id in seen:
        return 0
    # Important mark as seen *before* entering recursion to gracefully handle self-referential objects
    seen.add(obj_id)
    if isinstance(obj, dict):
        size += sum([get_size(v, seen) for v in obj.values()])
        size += sum([get_size(k, seen) for k in obj.keys()])
    elif hasattr(obj, '__dict__'):
        size += get_size(obj.__dict__, seen)
    elif hasattr(obj, '__iter__') and not isinstance(obj, (str, bytes, bytearray)):
        size += sum([get_size(i, seen) for i in obj])
    return size

def memory_usage_of_all_vars(vars):
    variables = {k: v for k, v in globals().items() if not k.startswith('__') and not callable(v) and k in vars}
    total_size = 0
    for name, obj in variables.items():
        size = get_size(obj)
        total_size += size
        print(f"{name}: {size} bytes")
    print(f"Total memory usage: {total_size / (1024 ** 2):.2f} MB")

if __name__=="__main__":
    text = "ATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACATGCGTACGTTAGCTAGCGTACGATCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACCGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTACGATCGTAGCTAGCGTAC$"
    p = "CGTACGATCGTAGC"
    # text = "ACTGAACACAGATATTATTACGTCCATTA$"
    # p = "ATTA"
    # text = "banananbanbanbana$"
    # p = "ana"
    # text = "ababa$"
    # p = "aba"
    skip = 32
    k = 4 # fraction of rows kept in SA
    bwt, sa = bwtViaSa(text)
    partial_sa = {i: si for i, si in enumerate(sa) if si % k == 0}
    bwt_len = len(bwt)
    C, occ = create_fm_index(bwt, skip)
    del sa[:]
    del sa

    
    start_time = time.time()
    pos = find_positions(bwt, C, occ, skip, bwt_len, p, partial_sa)
    end_time = time.time()

    print(f"Searching time: {end_time - start_time}")
    vars = ["C", "l", "occ", "partial_sa", "bwt"]
    memory_usage_of_all_vars(vars)
    if pos:
        print(f"Positions of the pattern {p} in the input text: {sorted(pos)}")
    else:
        print("There is no pattern {p} in the input text")
